package screensimport ShowcaseRepositoryimport android.util.Logimport com.adeo.kviewmodel.BaseSharedViewModelimport di.Injectimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.Jobimport kotlinx.coroutines.launchimport screens.showcase.models.ShowcaseActionimport screens.showcase.models.ShowcaseEventsimport screens.showcase.models.ShowcaseViewStateclass ShowcaseScreenViewModel : BaseSharedViewModel<ShowcaseViewState, ShowcaseAction, ShowcaseEvents>(initialState =ShowcaseViewState(    bestSellers = emptyList(), homeStore = emptyList())) {    private val repository: ShowcaseRepository = Inject.instance()    override fun obtainEvent(viewEvent: ShowcaseEvents) {        when (viewEvent) {            is ShowcaseEvents.LoadAllProducts -> loadAllProduct()        }    }    private fun loadAllProduct() {        viewState = viewState.copy(isLoading = true)        viewModelScope.launch(Dispatchers.IO) {            try {                val responseAllProduct = repository.getAllProducts()                responseAllProduct.let { listProduct ->                    viewState = viewState.copy(                        bestSellers = listProduct.bestSeller,                        homeStore = listProduct.homeStore,                        isLoading = false                    )                }            } catch (exception: Exception) {                Log.e("TAG", exception.toString())            }        }    }}