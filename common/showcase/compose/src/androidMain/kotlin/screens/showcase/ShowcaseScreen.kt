package screens.showcaseimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.grid.GridCellsimport androidx.compose.foundation.lazy.grid.LazyHorizontalGridimport androidx.compose.foundation.lazy.grid.itemsimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport coil.compose.AsyncImageimport com.adeo.kviewmodel.compose.observeAsStateimport com.adeo.kviewmodel.odyssey.StoredViewModelimport models.BestSellerimport screens.ShowcaseScreenViewModelimport screens.showcase.hotsalesitemscomponents.HotSaleColumnimport screens.showcase.models.ShowcaseEventsimport theme.Theme@Composablefun ShowcaseScreen() {    val modifier = Modifier    ShowcaseScreenContent(modifier = modifier.background(color = Theme.colors.secondaryBackground))}@OptIn(ExperimentalFoundationApi::class)@Composablefun ShowcaseScreenContent(modifier: Modifier) {    Scaffold(        topBar = { AppBar(modifier = modifier, selectedLocation = { }) },        content = {            LazyColumn(modifier = modifier) {                stickyHeader {                    SelectCategory(modifier = modifier,                        textHeader = "Select Category",                        textSubtitle = "view all",                        padding = 18)                }                item {                    SelectCategoryColumn(modifier = modifier)                }                stickyHeader {                    SelectCategory(modifier = modifier,                        textHeader = "Hot sales",                        textSubtitle = "see more",                        padding = 0)                }                item {                    HotSaleColumn(modifier = modifier)                }                stickyHeader {                    SelectCategory(modifier = modifier,                        textHeader = "Best Seller",                        textSubtitle = "see more",                        padding = 3)                }                item {                    BestSellersGrid(modifier = modifier)                }            }        }    )}@Composablefun BestSellersGrid(modifier: Modifier) {    StoredViewModel(factory = { ShowcaseScreenViewModel() }) { viewModel ->        val state = viewModel.viewStates().observeAsState()        when (state.value.isLoading) {            false -> {                LazyHorizontalGrid(                    modifier = modifier                        .padding(start = 14.dp, end = 18.dp)                        .fillMaxWidth()                        .height(300.dp),                    rows = GridCells.Fixed(2)                ) {                    items(items = state.value.bestSellers!!) { itemsBestSellers ->                        BestSellersItems(modifier = modifier, bestSellersItem = itemsBestSellers)                    }                }            }            true -> FullScreenLoaderComponent()        }        LaunchedEffect(key1 = Unit, block = {            viewModel.obtainEvent(viewEvent = ShowcaseEvents.LoadAllProducts)        })    }}@Composablefun BestSellersItems(modifier: Modifier, bestSellersItem: BestSeller?) {    Box(modifier = modifier        .padding(end = 8.dp, bottom = 12.dp)        .width(181.dp)        .height(227.dp)        .background(color = Theme.colors.whiteBackground, shape = RoundedCornerShape(10.dp))    ) {        AsyncImage(model = bestSellersItem?.picture,            contentDescription = "best sellers image",            modifier = modifier                .align(Alignment.TopCenter)        )        Column {            Text(text = bestSellersItem?.title ?: "")            Text(text = bestSellersItem?.priceWithoutDiscount.toString())            Text(text = bestSellersItem?.discountPrice.toString())        }    }}@Composablefun FullScreenLoaderComponent() {    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {        CircularProgressIndicator(            progress = 0.9f,            color = Theme.colors.primaryAction,            strokeWidth = 2.dp)    }}