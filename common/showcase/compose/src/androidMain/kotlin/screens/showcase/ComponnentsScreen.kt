package screens.showcaseimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyRowimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.lazy.rememberLazyListStateimport androidx.compose.foundation.selection.selectableimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardActionsimport androidx.compose.material.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.layout.layoutimport androidx.compose.ui.platform.LocalFocusManagerimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.res.vectorResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport coil.compose.AsyncImageimport com.aistudio.ecommerceconcept.showcase.compose.Rimport screens.showcase.models.CategoryItemimport theme.Theme@Composablefun AppBar(modifier: Modifier, selectedLocation: () -> Unit) {    Box(modifier = modifier        .padding(top = 24.dp)        .fillMaxWidth()        .wrapContentHeight()) {        Row(modifier = modifier            .align(Alignment.Center)            .clickable { selectedLocation() },            horizontalArrangement = Arrangement.Center,            verticalAlignment = Alignment.CenterVertically) {            AsyncImage(model = R.drawable.ic_location,                contentDescription = "icon location filtr",                modifier = modifier                    .padding(end = 11.dp)                    .width(12.dp)                    .height(15.3.dp))            Text(text = "Zihuatanejo, Gro",                fontSize = 15.sp,                lineHeight = 19.01.sp,                fontWeight = FontWeight(500),                color = Theme.colors.primaryTextColor,                modifier = modifier)            AsyncImage(model = R.drawable.ic_arrow_down,                contentDescription = "drop down icon",                modifier = modifier                    .padding(start = 8.dp, top = 2.dp)                    .width(10.dp)                    .height(5.dp))        }        AsyncImage(model = R.drawable.ic_filtr,            contentDescription = "icon location filtr",            modifier = modifier                .padding(end = 35.dp)                .width(11.dp)                .height(13.dp)                .align(Alignment.CenterEnd))    }}@Composablefun SelectCategory(modifier: Modifier, textHeader: String, textSubtitle: String,padding: Int) {    Box(modifier = modifier        .padding(top = padding.dp)        .fillMaxWidth()) {        Text(text = textHeader,            color = Theme.colors.primaryTextColor,            lineHeight = 31.69.sp,            fontSize = 25.sp,            fontWeight = FontWeight(700),            modifier = modifier                .padding(start = 17.dp)        )        Text(text = textSubtitle,            color = Theme.colors.primaryAction,            lineHeight = 19.01.sp,            fontSize = 15.sp,            fontWeight = FontWeight(400),            modifier = modifier                .padding(end = 33.dp)                .align(Alignment.CenterEnd)        )    }}@Composablefun LabelIcon(color: Color) {    Box(contentAlignment = Alignment.Center,        modifier = Modifier            .padding(start = 20.dp,top = 14.dp)            .background(color = color, shape = CircleShape)            .layout() { measurable, constraints ->                val placeable = measurable.measure(constraints)                val currentHeight = placeable.height                val currentWidth = placeable.width                val newDiameter = maxOf(currentHeight, currentWidth)                layout(newDiameter, newDiameter) {                    placeable.placeRelative((newDiameter - currentWidth) / 2,                        (newDiameter - currentHeight) / 2)                }            }) {        Text(            text = "New",            fontSize = 10.sp,            textAlign = TextAlign.Center,            color = Color.White,            modifier = Modifier.padding(3.dp),        )    }}@Composablefun SelectCategoryColumn(modifier: Modifier) {    Column(modifier = modifier) {        SelectCategoryRow(modifier = modifier)        Box(modifier = modifier            .padding(vertical = 20.dp)            .fillMaxWidth()            .height(45.dp)) {            SearchTextField(modifier = modifier.align(Alignment.CenterStart))            IconButton(onClick = { },                modifier = modifier                    .padding(end = 37.dp)                    .size(34.dp)                    .background(color = Theme.colors.primaryAction, shape = CircleShape)                    .align(Alignment.CenterEnd)            ) {                Icon(                    painter = painterResource(id = R.drawable.ic_filtrr),                    contentDescription = "search icon", tint = Theme.colors.whiteBackground                )            }        }    }}@Composablefun SelectCategoryRow(modifier: Modifier) {    val categoryItems: List<CategoryItem> = listOf(        CategoryItem(            id = 1,            title = "Phones",            icon = R.drawable.ic_mobile_phone,            isSelected = false),        CategoryItem(            id = 2,            title = "Computer",            icon = R.drawable.ic_computer,            isSelected = false),        CategoryItem(            id = 3,            title = "Health",            icon = R.drawable.ic_health,            isSelected = false),        CategoryItem(            id = 4,            title = "Books",            icon = R.drawable.ic_books,            isSelected = false),        CategoryItem(            id = 5,            title = "Books",            icon = R.drawable.ic_books,            isSelected = false),    )    val listState = rememberLazyListState()    var selectedIndex by remember { mutableStateOf(-1) }    LazyRow(state = listState,        modifier = modifier.padding(top = 24.dp, start = 27.dp)    ) {        items(items = categoryItems) { categoryItems ->            Column(modifier = modifier.wrapContentSize()) {                Box(modifier = modifier                    .padding(end = 20.dp)                    .size(size = 71.dp)                    .selectable(                        selected = categoryItems.id == selectedIndex,                        onClick = {                            if (selectedIndex != categoryItems.id)                                selectedIndex = categoryItems.id else selectedIndex = -1                        })                    .background(color = if (categoryItems.id == selectedIndex)                        Theme.colors.primaryAction else Theme.colors.whiteBackground,                        shape = CircleShape),                    contentAlignment = Alignment.Center) {                    Icon(imageVector = ImageVector.vectorResource(categoryItems.icon),                        contentDescription = "${categoryItems.title} icon",                        tint = if (categoryItems.id == selectedIndex)                            Theme.colors.whiteBackground else Theme.colors.tintColor                    )                }                Text(text = categoryItems.title,                    textAlign = TextAlign.Center,                    fontWeight = FontWeight.W500,                    color = if (categoryItems.id == selectedIndex)                        Theme.colors.primaryAction else Theme.colors.primaryTextColor,                    modifier = modifier                        .padding(start = 11.dp, top = 7.dp)                )            }        }    }}@Composablefun SearchTextField(modifier: Modifier) {    val state = remember { mutableStateOf(TextFieldValue("")) }    val focusManager = LocalFocusManager.current    TextField(        value = state.value,        onValueChange = { value ->            state.value = value        },        modifier = modifier            .padding(start = 32.dp)            .wrapContentWidth()            .height(45.dp),        textStyle = TextStyle(color = Theme.colors.tintColor, fontSize = 12.sp),        leadingIcon = {            IconButton(                onClick = { state.value = TextFieldValue("") }            ) {                Icon(                    painter = painterResource(id = R.drawable.ic_search),                    contentDescription = "search icon",                )            }        },        placeholder = {            Text(text = "Search",                color = Theme.colors.tintColor,                fontSize = 12.sp,                modifier = modifier.background(color = Theme.colors.whiteBackground))        },        singleLine = true,        shape = RoundedCornerShape(40.dp),        colors = TextFieldDefaults.textFieldColors(            textColor = Theme.colors.tintColor,            cursorColor = Theme.colors.tintColor,            leadingIconColor = Theme.colors.primaryAction,            backgroundColor = Theme.colors.whiteBackground,            focusedIndicatorColor = Color.Transparent,            unfocusedIndicatorColor = Color.Transparent,            disabledIndicatorColor = Color.Transparent        ),        keyboardActions = KeyboardActions(onDone = { focusManager.clearFocus() }),    )}