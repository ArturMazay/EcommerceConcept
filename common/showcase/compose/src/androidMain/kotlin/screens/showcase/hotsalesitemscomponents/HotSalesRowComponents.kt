package screens.showcase.hotsalesitemscomponentsimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyRowimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.Buttonimport androidx.compose.material.ButtonDefaultsimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport coil.compose.AsyncImageimport com.adeo.kviewmodel.compose.observeAsStateimport com.adeo.kviewmodel.odyssey.StoredViewModelimport models.HomeStoreimport screens.ShowcaseScreenViewModelimport screens.showcase.FullScreenLoaderComponentimport screens.showcase.LabelIconimport screens.showcase.models.ShowcaseEventsimport theme.Theme@Composablefun HotSaleColumn(modifier: Modifier) {    StoredViewModel(factory = { ShowcaseScreenViewModel() }) { viewModel ->        val state = viewModel.viewStates().observeAsState()        when (state.value.isLoading) {            false -> {                LazyRow(modifier = modifier.fillMaxWidth()) {                    items(items = state.value.homeStore!!) { listHotSale ->                        HotSaleItems(hotSalesItem = listHotSale)                    }                }            }            true -> FullScreenLoaderComponent()        }        LaunchedEffect(key1 = Unit){            viewModel.obtainEvent(viewEvent = ShowcaseEvents.LoadAllProducts)        }    }}@Composablefun HotSaleItems(hotSalesItem: HomeStore?) {    Box(modifier = Modifier        .padding(start = 7.dp, end = 21.dp)        .fillMaxWidth()        .height(182.dp)        .clip(shape = RoundedCornerShape(10.dp))    ) {        AsyncImage(            model = hotSalesItem?.picture,            contentDescription = "image hot sale",            contentScale = ContentScale.FillBounds,            //modifier = Modifier.fillMaxSize()        )        if (hotSalesItem?.isNew == true) {            LabelIcon(color = Theme.colors.primaryAction)        }        ColumnProductDescriptionHotSaleItem(hotSalesItem = hotSalesItem)    }}@Composablefun ColumnProductDescriptionHotSaleItem(hotSalesItem: HomeStore?) {    Column(        modifier = Modifier            .padding(start = 20.dp, top = 60.dp),         verticalArrangement = Arrangement.Center) {        Text(            text = hotSalesItem?.title.toString(),            fontSize = 25.sp,            fontWeight = FontWeight.W700,            color = Theme.colors.whiteBackground)        Text(            text = hotSalesItem?.subtitle.toString(),            fontSize = 11.sp,            fontWeight = FontWeight.W400,            color = Theme.colors.whiteBackground,            modifier = Modifier.padding(top = 5.dp)        )        Button(            onClick = { /*TODO*/ },            colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),            contentPadding = PaddingValues(bottom = 3.dp),            modifier = Modifier                .padding(top = 26.dp)                .width(98.dp)                .height(23.dp)                .clip(shape = RoundedCornerShape(15.dp))        ) {            Text(text = "Buy now!",                fontSize = 11.sp,                lineHeight = 13.13.sp,                fontWeight = FontWeight.W700,                color = Theme.colors.primaryBackground)        }    }}